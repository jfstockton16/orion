[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "orion-arbitrage"
version = "1.0.0"
description = "Cross-exchange arbitrage engine for prediction markets (Kalshi & Polymarket)"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["arbitrage", "trading", "kalshi", "polymarket", "prediction-markets"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.1",
    "aiohttp>=3.9.5",
    "httpx>=0.27.0",
    "requests>=2.32.3",
    "web3>=6.15.1",
    "eth-account>=0.11.0",
    "sqlalchemy>=2.0.30",
    "alembic>=1.13.1",
    "apscheduler>=3.10.4",
    "python-telegram-bot>=21.1.1",
    "streamlit>=1.34.0",
    "plotly>=5.20.0",
    "pandas>=2.2.2",
    "fastapi>=0.111.0",
    "uvicorn>=0.29.0",
    "cryptography>=42.0.7",
    "boto3>=1.34.10",
    "tenacity>=8.3.0",
    "colorlog>=6.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "faker>=21.0.0",
    "black>=23.12.1",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
]

[project.scripts]
orion = "main:main"
orion-encrypt = "src.utils.secrets_manager:encrypt_credentials_cli"

[project.urls]
Homepage = "https://github.com/yourusername/orion"
Documentation = "https://github.com/yourusername/orion#readme"
Repository = "https://github.com/yourusername/orion"
"Bug Tracker" = "https://github.com/yourusername/orion/issues"

[tool.setuptools]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
